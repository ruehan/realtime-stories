[
  {
    "id": "post_1749657628737_o1q4cels4",
    "metadata": {
      "title": "React와 TypeScript로 실시간 블로그 만들기",
      "excerpt": "Colyseus를 활용한 실시간 기능을 가진 블로그 플랫폼 개발 경험을 공유합니다.",
      "thumbnail": "/images/react-typescript-blog.jpg",
      "metaDescription": "React, TypeScript, Colyseus를 사용한 실시간 블로그 개발 가이드",
      "keywords": [
        "React",
        "TypeScript",
        "Colyseus",
        "실시간",
        "블로그"
      ],
      "slug": "react와-typescript로-실시간-블로그-만들기"
    },
    "content": {
      "markdown": "# React와 TypeScript로 실시간 블로그 만들기\n\n이 포스트에서는 React와 TypeScript를 활용하여 실시간 기능을 가진 블로그를 만드는 과정을 설명합니다.\n\n## 기술 스택\n- **Frontend**: React, TypeScript, Tailwind CSS\n- **Backend**: Colyseus, Node.js\n- **실시간 통신**: WebSocket\n\n## 주요 기능\n\n### 1. 실시간 사용자 추적\n```typescript\nconst { users } = useLobbyState(lobbyRoom);\n```\n\n### 2. 미니맵 시각화\nSVG를 활용한 인터랙티브 미니맵으로 사용자들의 위치를 실시간으로 표시합니다.\n\n## 결론\n실시간 기능을 통해 더 인터랙티브한 블로그 경험을 제공할 수 있습니다.",
      "html": "\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>이 포스트에서는 React와 TypeScript를 활용하여 실시간 기능을 가진 블로그를 만드는 과정을 설명합니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ul>\n<li><strong>Frontend</strong>: React, TypeScript, Tailwind CSS</li>\n<li><strong>Backend</strong>: Colyseus, Node.js</li>\n<li><strong>실시간 통신</strong>: WebSocket</li>\n</ul>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>SVG를 활용한 인터랙티브 미니맵으로 사용자들의 위치를 실시간으로 표시합니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>실시간 기능을 통해 더 인터랙티브한 블로그 경험을 제공할 수 있습니다.</p>\n",
      "readingTime": 1
    },
    "classification": {
      "category": "Frontend",
      "tags": [
        "React",
        "TypeScript",
        "Colyseus",
        "WebSocket"
      ],
      "difficulty": "intermediate",
      "primaryLanguage": "typescript"
    },
    "stats": {
      "viewCount": 0,
      "likeCount": 0,
      "commentCount": 0,
      "shareCount": 0
    },
    "authorId": "author_1",
    "authorName": "Developer",
    "status": "published",
    "createdAt": 1749657628737,
    "updatedAt": 1749657628737,
    "publishedAt": 1749657628737,
    "featured": true,
    "allowComments": true
  },
  {
    "id": "post_1749657628768_z8wb8fsmo",
    "metadata": {
      "title": "Node.js 성능 최적화 가이드",
      "excerpt": "Node.js 애플리케이션의 성능을 향상시키는 다양한 기법들을 알아봅니다.",
      "metaDescription": "Node.js 성능 최적화를 위한 실무 가이드",
      "keywords": [
        "Node.js",
        "성능최적화",
        "Backend",
        "JavaScript"
      ],
      "slug": "nodejs-성능-최적화-가이드"
    },
    "content": {
      "markdown": "# Node.js 성능 최적화 가이드\n\nNode.js 애플리케이션의 성능을 최적화하는 방법에 대해 알아보겠습니다.\n\n## 1. 이벤트 루프 최적화\n\n```javascript\n// 비효율적인 코드\nfunction heavyComputation() {\n  for (let i = 0; i < 1000000; i++) {\n    // 무거운 연산\n  }\n}\n\n// 최적화된 코드\nfunction optimizedComputation() {\n  return new Promise((resolve) => {\n    setImmediate(() => {\n      // 무거운 연산을 분할\n      resolve();\n    });\n  });\n}\n```\n\n## 2. 메모리 관리\n- 메모리 누수 방지\n- 가비지 컬렉션 최적화\n\n## 3. 캐싱 전략\nRedis나 메모리 캐시를 활용한 성능 향상 방법을 설명합니다.",
      "html": "\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>Node.js 애플리케이션의 성능을 최적화하는 방법에 대해 알아보겠습니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ul>\n<li>메모리 누수 방지</li>\n<li>가비지 컬렉션 최적화</li>\n</ul>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>Redis나 메모리 캐시를 활용한 성능 향상 방법을 설명합니다.</p>\n",
      "readingTime": 1
    },
    "classification": {
      "category": "Backend",
      "tags": [
        "Node.js",
        "성능최적화",
        "JavaScript"
      ],
      "difficulty": "advanced",
      "primaryLanguage": "javascript"
    },
    "stats": {
      "viewCount": 0,
      "likeCount": 0,
      "commentCount": 0,
      "shareCount": 0
    },
    "authorId": "author_1",
    "authorName": "Developer",
    "status": "published",
    "createdAt": 1749657628768,
    "updatedAt": 1749657628768,
    "publishedAt": 1749657628768,
    "featured": false,
    "allowComments": true
  },
  {
    "id": "post_1749657628774_nsuanwnn5",
    "metadata": {
      "title": "CSS Grid와 Flexbox 완벽 가이드",
      "excerpt": "현대 웹 레이아웃의 핵심인 CSS Grid와 Flexbox를 실무 예제와 함께 마스터해보세요.",
      "thumbnail": "/images/css-grid-flexbox.jpg",
      "metaDescription": "CSS Grid와 Flexbox를 활용한 반응형 웹 레이아웃 가이드",
      "keywords": [
        "CSS",
        "Grid",
        "Flexbox",
        "레이아웃",
        "반응형"
      ],
      "slug": "css-grid와-flexbox-완벽-가이드"
    },
    "content": {
      "markdown": "# CSS Grid와 Flexbox 완벽 가이드\n\n현대 웹 개발에서 레이아웃을 구성하는 두 가지 핵심 기술을 깊이 있게 살펴보겠습니다.\n\n## Flexbox 기초\n\n### 1. 컨테이너 속성\n```css\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n```\n\n### 2. 아이템 속성\n```css\n.flex-item {\n  flex: 1 1 auto;\n  align-self: stretch;\n}\n```\n\n## CSS Grid 마스터하기\n\n### 그리드 템플릿 정의\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  grid-template-rows: auto 1fr auto;\n  gap: 2rem;\n}\n```\n\n### 그리드 영역 배치\n```css\n.header { grid-area: 1 / 1 / 2 / -1; }\n.sidebar { grid-area: 2 / 1 / 3 / 2; }\n.main { grid-area: 2 / 2 / 3 / -1; }\n.footer { grid-area: 3 / 1 / 4 / -1; }\n```\n\n## 실무 팁\n\n1. **언제 Flexbox를 사용할까?**\n   - 1차원 레이아웃 (행 또는 열)\n   - 컴포넌트 내부 정렬\n   - 동적 크기 조절\n\n2. **언제 Grid를 사용할까?**\n   - 2차원 레이아웃 (행과 열)\n   - 페이지 전체 구조\n   - 복잡한 레이아웃 패턴\n\n## 브라우저 호환성\n\n모든 모던 브라우저에서 완벽하게 지원되며, IE11에서도 부분적으로 사용 가능합니다.",
      "html": "\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>현대 웹 개발에서 레이아웃을 구성하는 두 가지 핵심 기술을 깊이 있게 살펴보겠습니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ol>\n<li><p><strong>언제 Flexbox를 사용할까?</strong></p>\n<ul>\n<li>1차원 레이아웃 (행 또는 열)</li>\n<li>컴포넌트 내부 정렬</li>\n<li>동적 크기 조절</li>\n</ul>\n</li>\n<li><p><strong>언제 Grid를 사용할까?</strong></p>\n<ul>\n<li>2차원 레이아웃 (행과 열)</li>\n<li>페이지 전체 구조</li>\n<li>복잡한 레이아웃 패턴</li>\n</ul>\n</li>\n</ol>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>모든 모던 브라우저에서 완벽하게 지원되며, IE11에서도 부분적으로 사용 가능합니다.</p>\n",
      "readingTime": 1
    },
    "classification": {
      "category": "Frontend",
      "tags": [
        "CSS",
        "Grid",
        "Flexbox",
        "레이아웃"
      ],
      "difficulty": "beginner",
      "primaryLanguage": "css"
    },
    "stats": {
      "viewCount": 0,
      "likeCount": 0,
      "commentCount": 0,
      "shareCount": 0
    },
    "authorId": "author_2",
    "authorName": "CSS Master",
    "status": "published",
    "createdAt": 1749657628774,
    "updatedAt": 1749657628774,
    "publishedAt": 1749657628774,
    "featured": false,
    "allowComments": true
  },
  {
    "id": "post_1749657628782_mkofwm7ld",
    "metadata": {
      "title": "Next.js 13 App Router 심화 가이드",
      "excerpt": "Next.js 13의 새로운 App Router를 활용한 고성능 웹 애플리케이션 개발법을 배워보세요.",
      "thumbnail": "/images/nextjs-app-router.jpg",
      "metaDescription": "Next.js 13 App Router를 활용한 풀스택 개발 가이드",
      "keywords": [
        "Next.js",
        "App Router",
        "React",
        "SSR",
        "Server Components"
      ],
      "slug": "nextjs-13-app-router-심화-가이드"
    },
    "content": {
      "markdown": "# Next.js 13 App Router 심화 가이드\n\nNext.js 13에서 도입된 App Router는 React Server Components를 기반으로 한 새로운 라우팅 시스템입니다.\n\n## App Router vs Pages Router\n\n### 기존 Pages Router\n```javascript\n// pages/blog/[slug].js\nexport default function BlogPost({ post }) {\n  return <article>{post.content}</article>;\n}\n\nexport async function getStaticProps({ params }) {\n  const post = await fetchPost(params.slug);\n  return { props: { post } };\n}\n```\n\n### 새로운 App Router\n```javascript\n// app/blog/[slug]/page.js\nexport default async function BlogPost({ params }) {\n  const post = await fetchPost(params.slug);\n  return <article>{post.content}</article>;\n}\n```\n\n## Server Components의 장점\n\n1. **Zero Bundle Size**: 서버에서만 실행되어 클라이언트 번들 크기 감소\n2. **Direct Database Access**: 서버에서 직접 데이터베이스 접근 가능\n3. **Improved Performance**: 초기 로딩 성능 향상\n\n## Streaming과 Suspense\n\n```javascript\nimport { Suspense } from 'react';\n\nexport default function Layout({ children }) {\n  return (\n    <div>\n      <Header />\n      <Suspense fallback={<Loading />}>\n        {children}\n      </Suspense>\n      <Footer />\n    </div>\n  );\n}\n```\n\n## 새로운 파일 규칙\n\n- `page.js`: 페이지 컴포넌트\n- `layout.js`: 레이아웃 컴포넌트\n- `loading.js`: 로딩 UI\n- `error.js`: 에러 UI\n- `not-found.js`: 404 페이지\n\n## 메타데이터 API\n\n```javascript\nexport const metadata = {\n  title: 'My Blog Post',\n  description: 'An amazing blog post',\n  openGraph: {\n    images: ['/og-image.jpg'],\n  },\n};\n```\n\n## 마이그레이션 가이드\n\n기존 Pages Router에서 App Router로 점진적으로 마이그레이션하는 방법을 소개합니다.",
      "html": "\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>Next.js 13에서 도입된 App Router는 React Server Components를 기반으로 한 새로운 라우팅 시스템입니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ol>\n<li><strong>Zero Bundle Size</strong>: 서버에서만 실행되어 클라이언트 번들 크기 감소</li>\n<li><strong>Direct Database Access</strong>: 서버에서 직접 데이터베이스 접근 가능</li>\n<li><strong>Improved Performance</strong>: 초기 로딩 성능 향상</li>\n</ol>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ul>\n<li><code class=\"inline-code\">[object Object]</code>: 페이지 컴포넌트</li>\n<li><code class=\"inline-code\">[object Object]</code>: 레이아웃 컴포넌트</li>\n<li><code class=\"inline-code\">[object Object]</code>: 로딩 UI</li>\n<li><code class=\"inline-code\">[object Object]</code>: 에러 UI</li>\n<li><code class=\"inline-code\">[object Object]</code>: 404 페이지</li>\n</ul>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>기존 Pages Router에서 App Router로 점진적으로 마이그레이션하는 방법을 소개합니다.</p>\n",
      "readingTime": 2
    },
    "classification": {
      "category": "Frontend",
      "tags": [
        "Next.js",
        "React",
        "App Router",
        "SSR"
      ],
      "difficulty": "intermediate",
      "primaryLanguage": "javascript"
    },
    "stats": {
      "viewCount": 0,
      "likeCount": 0,
      "commentCount": 0,
      "shareCount": 0
    },
    "authorId": "author_3",
    "authorName": "Next.js Expert",
    "status": "published",
    "createdAt": 1749657628783,
    "updatedAt": 1749657628783,
    "publishedAt": 1749657628783,
    "featured": true,
    "allowComments": true
  },
  {
    "id": "post_1749657628789_ljhm2fyfr",
    "metadata": {
      "title": "Docker를 활용한 개발환경 구축",
      "excerpt": "Docker와 Docker Compose를 사용하여 일관된 개발환경을 구축하는 방법을 알아봅시다.",
      "thumbnail": "/images/docker-dev-env.jpg",
      "metaDescription": "Docker로 구축하는 현대적 개발환경 가이드",
      "keywords": [
        "Docker",
        "DevOps",
        "컨테이너",
        "개발환경"
      ],
      "slug": "docker를-활용한-개발환경-구축"
    },
    "content": {
      "markdown": "# Docker를 활용한 개발환경 구축\n\nDocker를 사용하면 \"내 컴퓨터에서는 잘 되는데\"라는 문제를 해결할 수 있습니다.\n\n## Docker 기초 개념\n\n### 이미지와 컨테이너\n- **이미지**: 애플리케이션과 의존성이 패키징된 템플릿\n- **컨테이너**: 이미지의 실행 인스턴스\n\n## Dockerfile 작성하기\n\n```dockerfile\n# Node.js 애플리케이션 예제\nFROM node:18-alpine\n\nWORKDIR /app\n\n# 의존성 복사 및 설치\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# 소스 코드 복사\nCOPY . .\n\n# 포트 노출\nEXPOSE 3000\n\n# 실행 명령\nCMD [\"npm\", \"start\"]\n```\n\n## Docker Compose로 멀티 서비스 구성\n\n```yaml\nversion: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=development\n    volumes:\n      - .:/app\n      - /app/node_modules\n    depends_on:\n      - db\n\n  db:\n    image: postgres:14\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\nvolumes:\n  postgres_data:\n```\n\n## 최적화 팁\n\n### 1. 멀티 스테이지 빌드\n```dockerfile\n# 빌드 스테이지\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# 실행 스테이지\nFROM node:18-alpine\nWORKDIR /app\nCOPY --from=builder /app/dist ./dist\nCOPY package*.json ./\nRUN npm ci --only=production\nCMD [\"npm\", \"start\"]\n```\n\n### 2. .dockerignore 활용\n```\nnode_modules\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.cache\n```\n\n## 개발 워크플로우\n\n1. **로컬 개발**: `docker-compose up -d`\n2. **테스트**: `docker-compose exec app npm test`\n3. **프로덕션 빌드**: `docker build -t myapp:prod .`\n\nDocker를 활용하면 팀원 모두가 동일한 환경에서 개발할 수 있습니다.",
      "html": "\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>Docker를 사용하면 \"내 컴퓨터에서는 잘 되는데\"라는 문제를 해결할 수 있습니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ul>\n<li><strong>이미지</strong>: 애플리케이션과 의존성이 패키징된 템플릿</li>\n<li><strong>컨테이너</strong>: 이미지의 실행 인스턴스</li>\n</ul>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ol>\n<li><strong>로컬 개발</strong>: <code class=\"inline-code\">[object Object]</code></li>\n<li><strong>테스트</strong>: <code class=\"inline-code\">[object Object]</code></li>\n<li><strong>프로덕션 빌드</strong>: <code class=\"inline-code\">[object Object]</code></li>\n</ol>\n<p>Docker를 활용하면 팀원 모두가 동일한 환경에서 개발할 수 있습니다.</p>\n",
      "readingTime": 2
    },
    "classification": {
      "category": "DevOps",
      "tags": [
        "Docker",
        "DevOps",
        "컨테이너",
        "개발환경"
      ],
      "difficulty": "intermediate",
      "primaryLanguage": "dockerfile"
    },
    "stats": {
      "viewCount": 0,
      "likeCount": 0,
      "commentCount": 0,
      "shareCount": 0
    },
    "authorId": "author_4",
    "authorName": "DevOps Engineer",
    "status": "published",
    "createdAt": 1749657628789,
    "updatedAt": 1749657628789,
    "publishedAt": 1749657628789,
    "featured": false,
    "allowComments": true
  },
  {
    "id": "post_1749657628795_3ms0dy2xe",
    "metadata": {
      "title": "JavaScript 비동기 프로그래밍 마스터하기",
      "excerpt": "Promise, async/await, 그리고 최신 비동기 패턴까지 JavaScript 비동기 프로그래밍의 모든 것.",
      "thumbnail": "/images/js-async.jpg",
      "metaDescription": "JavaScript 비동기 프로그래밍 완벽 가이드",
      "keywords": [
        "JavaScript",
        "Promise",
        "async",
        "await",
        "비동기"
      ],
      "slug": "javascript-비동기-프로그래밍-마스터하기"
    },
    "content": {
      "markdown": "# JavaScript 비동기 프로그래밍 마스터하기\n\nJavaScript의 싱글 스레드 특성과 비동기 처리의 핵심을 깊이 있게 알아보겠습니다.\n\n## 콜백에서 Promise까지\n\n### 콜백 헬의 문제\n```javascript\n// 콜백 헬 예제\ngetData(function(a) {\n  getMoreData(a, function(b) {\n    getEvenMoreData(b, function(c) {\n      // 지옥의 시작...\n    });\n  });\n});\n```\n\n### Promise로 해결\n```javascript\ngetData()\n  .then(a => getMoreData(a))\n  .then(b => getEvenMoreData(b))\n  .then(c => {\n    // 깔끔한 체이닝\n  })\n  .catch(error => console.error(error));\n```\n\n## Async/Await의 우아함\n\n```javascript\nasync function fetchUserData(userId) {\n  try {\n    const user = await fetch(`/api/users/${userId}`);\n    const userData = await user.json();\n    const posts = await fetch(`/api/users/${userId}/posts`);\n    const postsData = await posts.json();\n    \n    return { user: userData, posts: postsData };\n  } catch (error) {\n    console.error('데이터 페치 실패:', error);\n    throw error;\n  }\n}\n```\n\n## 병렬 처리 최적화\n\n### Promise.all 활용\n```javascript\nasync function fetchAllData() {\n  const [users, posts, comments] = await Promise.all([\n    fetch('/api/users').then(r => r.json()),\n    fetch('/api/posts').then(r => r.json()),\n    fetch('/api/comments').then(r => r.json())\n  ]);\n  \n  return { users, posts, comments };\n}\n```\n\n### Promise.allSettled로 에러 핸들링\n```javascript\nasync function fetchWithErrorHandling() {\n  const results = await Promise.allSettled([\n    fetch('/api/critical-data'),\n    fetch('/api/optional-data'),\n    fetch('/api/experimental-data')\n  ]);\n  \n  results.forEach((result, index) => {\n    if (result.status === 'fulfilled') {\n      console.log(`요청 ${index} 성공:, result.value`);\n    } else {\n      console.log(`요청 ${index} 실패:, result.reason`);\n    }\n  });\n}\n```\n\n## 고급 패턴들\n\n### 커스텀 Promise 생성\n```javascript\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction timeoutPromise(promise, ms) {\n  return Promise.race([\n    promise,\n    delay(ms).then(() => Promise.reject(new Error('Timeout')))\n  ]);\n}\n```\n\n### 재시도 로직\n```javascript\nasync function retryOperation(operation, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await operation();\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      await delay(1000 * Math.pow(2, i)); // 지수 백오프\n    }\n  }\n}\n```\n\n## 이벤트 루프 이해하기\n\nJavaScript 엔진의 이벤트 루프 동작 방식을 이해하면 비동기 코드의 실행 순서를 예측할 수 있습니다.\n\n비동기 프로그래밍을 마스터하면 더 나은 사용자 경험을 제공할 수 있습니다.",
      "html": "\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>JavaScript의 싱글 스레드 특성과 비동기 처리의 핵심을 깊이 있게 알아보겠습니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>JavaScript 엔진의 이벤트 루프 동작 방식을 이해하면 비동기 코드의 실행 순서를 예측할 수 있습니다.</p>\n<p>비동기 프로그래밍을 마스터하면 더 나은 사용자 경험을 제공할 수 있습니다.</p>\n",
      "readingTime": 2
    },
    "classification": {
      "category": "Frontend",
      "tags": [
        "JavaScript",
        "Promise",
        "async",
        "await"
      ],
      "difficulty": "intermediate",
      "primaryLanguage": "javascript"
    },
    "stats": {
      "viewCount": 0,
      "likeCount": 0,
      "commentCount": 0,
      "shareCount": 0
    },
    "authorId": "author_1",
    "authorName": "Developer",
    "status": "published",
    "createdAt": 1749657628795,
    "updatedAt": 1749657628795,
    "publishedAt": 1749657628795,
    "featured": false,
    "allowComments": true
  },
  {
    "id": "post_1749657628803_d4odp5ry6",
    "metadata": {
      "title": "웹 성능 최적화 체크리스트",
      "excerpt": "실제 프로젝트에서 적용할 수 있는 웹 성능 최적화 기법들을 단계별로 정리했습니다.",
      "thumbnail": "/images/web-performance.jpg",
      "metaDescription": "웹 성능 최적화를 위한 실무 체크리스트",
      "keywords": [
        "성능최적화",
        "웹성능",
        "Core Web Vitals",
        "SEO"
      ],
      "slug": "웹-성능-최적화-체크리스트"
    },
    "content": {
      "markdown": "# 웹 성능 최적화 체크리스트\n\n사용자 경험과 SEO에 직결되는 웹 성능 최적화 기법들을 실무 관점에서 정리했습니다.\n\n## Core Web Vitals 이해하기\n\nGoogle이 정의한 핵심 웹 성능 지표들입니다:\n\n### 1. LCP (Largest Contentful Paint)\n- **목표**: 2.5초 이내\n- **최적화 방법**:\n  - 이미지 최적화\n  - 서버 응답 시간 개선\n  - 리소스 로딩 우선순위 조정\n\n### 2. FID (First Input Delay)  \n- **목표**: 100ms 이내\n- **최적화 방법**:\n  - JavaScript 실행 시간 단축\n  - 메인 스레드 블로킹 최소화\n  - 코드 분할\n\n### 3. CLS (Cumulative Layout Shift)\n- **목표**: 0.1 이내  \n- **최적화 방법**:\n  - 이미지/비디오 크기 명시\n  - 동적 콘텐츠 삽입 최소화\n\n## 이미지 최적화 전략\n\n### 최신 포맷 사용\n```html\n<picture>\n  <source srcset=\"image.avif\" type=\"image/avif\">\n  <source srcset=\"image.webp\" type=\"image/webp\">\n  <img src=\"image.jpg\" alt=\"설명\" loading=\"lazy\">\n</picture>\n```\n\n### 적응형 이미지\n```html\n<img\n  srcset=\"small.jpg 480w, medium.jpg 800w, large.jpg 1200w\"\n  sizes=\"(max-width: 480px) 100vw, (max-width: 800px) 50vw, 25vw\"\n  src=\"medium.jpg\"\n  alt=\"반응형 이미지\"\n>\n```\n\n## JavaScript 최적화\n\n### 코드 분할\n```javascript\n// 동적 import를 사용한 코드 분할\nconst LazyComponent = lazy(() => import('./LazyComponent'));\n\n// 라우트 기반 분할\nconst HomePage = lazy(() => import('./pages/Home'));\nconst AboutPage = lazy(() => import('./pages/About'));\n```\n\n### Tree Shaking\n```javascript\n// ❌ 전체 라이브러리 import\nimport _ from 'lodash';\n\n// ✅ 필요한 함수만 import\nimport { debounce } from 'lodash';\n```\n\n## CSS 최적화\n\n### Critical CSS 인라인화\n```html\n<style>\n  /* Above-the-fold 스타일만 인라인 */\n  .header { /* critical styles */ }\n  .hero { /* critical styles */ }\n</style>\n\n<link rel=\"preload\" href=\"non-critical.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n```\n\n### CSS 압축 및 정리\n```javascript\n// PostCSS 설정\nmodule.exports = {\n  plugins: [\n    require('autoprefixer'),\n    require('cssnano')({\n      preset: 'default',\n    }),\n  ],\n};\n```\n\n## 리소스 힌트 활용\n\n```html\n<!-- DNS 사전 해석 -->\n<link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\">\n\n<!-- 연결 사전 설정 -->\n<link rel=\"preconnect\" href=\"https://api.example.com\">\n\n<!-- 리소스 사전 로딩 -->\n<link rel=\"preload\" href=\"hero-image.jpg\" as=\"image\">\n\n<!-- 다음 페이지 사전 페치 -->\n<link rel=\"prefetch\" href=\"/next-page.html\">\n```\n\n## 캐싱 전략\n\n### 서비스 워커 활용\n```javascript\n// sw.js\nconst CACHE_NAME = 'my-app-v1';\nconst urlsToCache = [\n  '/',\n  '/static/css/main.css',\n  '/static/js/main.js'\n];\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => cache.addAll(urlsToCache))\n  );\n});\n```\n\n## 성능 측정 도구\n\n1. **Lighthouse**: Chrome 내장 도구\n2. **WebPageTest**: 상세한 성능 분석\n3. **GTmetrix**: 종합적인 성능 리포트\n4. **Chrome DevTools**: 실시간 성능 모니터링\n\n## 모니터링 설정\n\n```javascript\n// 성능 메트릭 수집\nfunction measurePerformance() {\n  const observer = new PerformanceObserver((list) => {\n    list.getEntries().forEach((entry) => {\n      // 분석 서비스로 전송\n      analytics.track('performance', {\n        name: entry.name,\n        value: entry.value,\n        rating: entry.rating\n      });\n    });\n  });\n  \n  observer.observe({ entryTypes: ['web-vitals'] });\n}\n```\n\n성능 최적화는 지속적인 과정입니다. 정기적인 모니터링과 개선이 중요합니다.",
      "html": "\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>사용자 경험과 SEO에 직결되는 웹 성능 최적화 기법들을 실무 관점에서 정리했습니다.</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <p>Google이 정의한 핵심 웹 성능 지표들입니다:</p>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ul>\n<li><strong>목표</strong>: 2.5초 이내</li>\n<li><strong>최적화 방법</strong>:<ul>\n<li>이미지 최적화</li>\n<li>서버 응답 시간 개선</li>\n<li>리소스 로딩 우선순위 조정</li>\n</ul>\n</li>\n</ul>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ul>\n<li><strong>목표</strong>: 100ms 이내</li>\n<li><strong>최적화 방법</strong>:<ul>\n<li>JavaScript 실행 시간 단축</li>\n<li>메인 스레드 블로킹 최소화</li>\n<li>코드 분할</li>\n</ul>\n</li>\n</ul>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ul>\n<li><strong>목표</strong>: 0.1 이내  </li>\n<li><strong>최적화 방법</strong>:<ul>\n<li>이미지/비디오 크기 명시</li>\n<li>동적 콘텐츠 삽입 최소화</li>\n</ul>\n</li>\n</ul>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      \n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div>\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <ol>\n<li><strong>Lighthouse</strong>: Chrome 내장 도구</li>\n<li><strong>WebPageTest</strong>: 상세한 성능 분석</li>\n<li><strong>GTmetrix</strong>: 종합적인 성능 리포트</li>\n<li><strong>Chrome DevTools</strong>: 실시간 성능 모니터링</li>\n</ol>\n\n        <a href=\"#object-object\" class=\"anchor-link\" aria-hidden=\"true\">#</a>\n        [object Object]\n      <div class=\"code-block-container\">\n        <div class=\"code-block-header\">\n          <button class=\"copy-button\" data-code=\"[object Object]\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <rect width=\"13\" height=\"13\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            Copy\n          </button>\n        </div>\n        <pre class=\"hljs\"><code>[object Object]</code></pre>\n      </div><p>성능 최적화는 지속적인 과정입니다. 정기적인 모니터링과 개선이 중요합니다.</p>\n",
      "readingTime": 3
    },
    "classification": {
      "category": "Frontend",
      "tags": [
        "성능최적화",
        "웹성능",
        "Core Web Vitals"
      ],
      "difficulty": "advanced",
      "primaryLanguage": "javascript"
    },
    "stats": {
      "viewCount": 0,
      "likeCount": 0,
      "commentCount": 0,
      "shareCount": 0
    },
    "authorId": "author_2",
    "authorName": "CSS Master",
    "status": "published",
    "createdAt": 1749657628803,
    "updatedAt": 1749657628803,
    "publishedAt": 1749657628803,
    "featured": true,
    "allowComments": true
  }
]